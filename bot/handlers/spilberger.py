# bot/handlers/spilberger.py

from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from bot.services.openai_assistant import ask_mia
from bot.keyboards.main_keyboard import main_menu

router = Router()


class SpilbergerTest(StatesGroup):
    q1 = State()
    q2 = State()
    q3 = State()
    q4 = State()


questions = [
    "1Ô∏è‚É£ –¢—ã —á–∞—Å—Ç–æ –æ—â—É—â–∞–µ—à—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏–ª–∏ —Ç—Ä–µ–≤–æ–≥—É –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã?",
    "2Ô∏è‚É£ –ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ –ø–µ—Ä–µ–¥ –≤–∞–∂–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏?",
    "3Ô∏è‚É£ –ë—ã–≤–∞–µ—Ç –ª–∏, —á—Ç–æ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è –¥–∞–∂–µ –≤ —Å–ø–æ–∫–æ–π–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ?",
    "4Ô∏è‚É£ –¢—ã –ª–µ–≥–∫–æ —Ç–µ—Ä—è–µ—à—å –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —ç–º–æ—Ü–∏—è–º–∏?"
]


@router.message(F.text == "üìä –°–ø–∏–ª–±–µ—Ä–≥–µ—Ä")
async def spilberger_start(message: types.Message, state: FSMContext):
    await state.set_state(SpilbergerTest.q1)
    await message.answer("üìä –¢–µ—Å—Ç –°–ø–∏–ª–±–µ—Ä–≥–µ—Ä–∞ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏.\n\n–û—Ü–µ–Ω–∏ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 3:\n0 ‚Äî –Ω–∏–∫–æ–≥–¥–∞\n1 ‚Äî –∏–Ω–æ–≥–¥–∞\n2 ‚Äî —á–∞—Å—Ç–æ\n3 ‚Äî –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞\n\n" + questions[0])


@router.message(SpilbergerTest.q1)
async def spilberger_q1(message: types.Message, state: FSMContext):
    await state.update_data(q1=message.text)
    await state.set_state(SpilbergerTest.q2)
    await message.answer(questions[1])


@router.message(SpilbergerTest.q2)
async def spilberger_q2(message: types.Message, state: FSMContext):
    await state.update_data(q2=message.text)
    await state.set_state(SpilbergerTest.q3)
    await message.answer(questions[2])


@router.message(SpilbergerTest.q3)
async def spilberger_q3(message: types.Message, state: FSMContext):
    await state.update_data(q3=message.text)
    await state.set_state(SpilbergerTest.q4)
    await message.answer(questions[3])


@router.message(SpilbergerTest.q4)
async def spilberger_q4(message: types.Message, state: FSMContext):
    await state.update_data(q4=message.text)
    data = await state.get_data()
    await state.clear()

    try:
        scores = [int(data[f'q{i}']) for i in range(1, 5)]
        total = sum(scores)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –æ—Ç 0 –¥–æ 3 –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        return

    summary = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –°–ø–∏–ª–±–µ—Ä–≥–µ—Ä–∞: {total} –±–∞–ª–ª–æ–≤.\n\n"
    if total <= 4:
        summary += "üü¢ –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏. –í—Å—ë –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º."
    elif 5 <= total <= 9:
        summary += "üü° –£–º–µ—Ä–µ–Ω–Ω–∞—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å. –ï—Å—Ç—å –ø–æ–≤–æ–¥—ã –¥–ª—è –≤–Ω–∏–º–∞–Ω–∏—è."
    elif 10 <= total <= 14:
        summary += "üü† –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏."
    else:
        summary += "üî¥ –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏—è."

    user_name = message.from_user.first_name or "–¥—Ä—É–≥"
    user_id = message.from_user.id
    response = await ask_mia(user_id, user_name, f"{summary}\n\n–ú–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —Ç—Ä–µ–≤–æ–∂–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–¥—Å–∫–∞–∂–∏, –∫–∞–∫ –µ–º—É –ø–æ–º–æ—á—å –º—è–≥–∫–æ –∏ —Å –∑–∞–±–æ—Ç–æ–π.")

    await message.answer(f"<b>{summary}</b>\n\n{response}", reply_markup=main_menu())
