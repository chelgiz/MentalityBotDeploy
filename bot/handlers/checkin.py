from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from bot.services.openai_assistant import ask_mia
from bot.keyboards.main_keyboard import main_menu

router = Router()

class CheckInStates(StatesGroup):
    mood = State()
    energy = State()
    motivation = State()

@router.message(lambda msg: msg.text == "‚úÖ –ß–µ–∫-–∏–Ω")
async def start_checkin(message: types.Message, state: FSMContext):
    await message.answer("–ß–µ–∫-–∏–Ω üåÖ\n\n–ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —Å–≤–æ—ë **–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ** –æ—Ç 1 –¥–æ 10?")
    await state.set_state(CheckInStates.mood)

@router.message(CheckInStates.mood)
async def checkin_mood(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or not (1 <= int(message.text) <= 10):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
        return
    await state.update_data(mood=int(message.text))
    await message.answer("–ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —Å–≤–æ—é **—ç–Ω–µ—Ä–≥–∏—é** –æ—Ç 1 –¥–æ 10?")
    await state.set_state(CheckInStates.energy)

@router.message(CheckInStates.energy)
async def checkin_energy(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or not (1 <= int(message.text) <= 10):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
        return
    await state.update_data(energy=int(message.text))
    await message.answer("–ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —Å–≤–æ—é **–º–æ—Ç–∏–≤–∞—Ü–∏—é** –æ—Ç 1 –¥–æ 10?")
    await state.set_state(CheckInStates.motivation)

@router.message(CheckInStates.motivation)
async def checkin_motivation(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or not (1 <= int(message.text) <= 10):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
        return
    await state.update_data(motivation=int(message.text))
    data = await state.get_data()
    await state.clear()

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ú–∏–µ–π
    prompt = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à—ë–ª —É—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω. –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {data['mood']}/10, —ç–Ω–µ—Ä–≥–∏—è: {data['energy']}/10, –º–æ—Ç–∏–≤–∞—Ü–∏—è: {data['motivation']}/10.\n"
        f"–°–¥–µ–ª–∞–π –º—è–≥–∫–∏–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ï—Å–ª–∏ –æ—Ü–µ–Ω–∫–∏ –Ω–∏–∑–∫–∏–µ, –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–æ—Å—Ç—ã–µ –∏ –¥–æ–±—Ä—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
    )
    response = await ask_mia(prompt)

    await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å üåø\n\n{response}", reply_markup=main_menu())
