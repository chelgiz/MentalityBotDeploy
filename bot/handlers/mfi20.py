# bot/handlers/mfi20.py

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.keyboards.main_keyboard import main_menu
from bot.services.openai_assistant import ask_mia

router = Router()

class MFI20(StatesGroup):
    Q1 = State()
    Q2 = State()
    Q3 = State()
    Q4 = State()

questions = {
    "Q1": "–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Ñ–∏–∑–∏—á–µ—Å–∫—É—é —É—Å—Ç–∞–ª–æ—Å—Ç—å?",
    "Q2": "–ö–∞–∫ —á–∞—Å—Ç–æ —É —Ç–µ–±—è –Ω–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–¥–∞—á?",
    "Q3": "–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏—Å—Ç–æ—â–µ–Ω–∏–µ?",
    "Q4": "–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã —Ç–µ—Ä—è–µ—à—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –¥–∞–∂–µ –∫ –≤–∞–∂–Ω—ã–º –¥–µ–ª–∞–º?",
}

@router.message(F.text == "‚ö° –ê—Å—Ç–µ–Ω–∏—è")
async def start_mfi(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(MFI20.Q1)
    await state.update_data(score=0)
    await message.answer("–ú—ã –Ω–∞—á–Ω—ë–º —Ç–µ—Å—Ç –Ω–∞ –∞—Å—Ç–µ–Ω–∏—é. –û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ –ø–æ —à–∫–∞–ª–µ:\n\n"
                         "0 ‚Äî –Ω–∏–∫–æ–≥–¥–∞\n1 ‚Äî —Ä–µ–¥–∫–æ\n2 ‚Äî –∏–Ω–æ–≥–¥–∞\n3 ‚Äî —á–∞—Å—Ç–æ\n4 ‚Äî –≤—Å–µ–≥–¥–∞\n\n"
                         f"{questions['Q1']}")

@router.message(MFI20.Q1)
async def mfi_q1(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) not in range(5):
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 4.")
    await state.update_data(score=int(message.text))
    await state.set_state(MFI20.Q2)
    await message.answer(questions["Q2"])

@router.message(MFI20.Q2)
async def mfi_q2(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) not in range(5):
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 4.")
    data = await state.get_data()
    score = data["score"] + int(message.text)
    await state.update_data(score=score)
    await state.set_state(MFI20.Q3)
    await message.answer(questions["Q3"])

@router.message(MFI20.Q3)
async def mfi_q3(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) not in range(5):
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 4.")
    data = await state.get_data()
    score = data["score"] + int(message.text)
    await state.update_data(score=score)
    await state.set_state(MFI20.Q4)
    await message.answer(questions["Q4"])

@router.message(MFI20.Q4)
async def mfi_q4(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) not in range(5):
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 4.")

    data = await state.get_data()
    total_score = data["score"] + int(message.text)
    await state.clear()

    await message.answer(f"üîé –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.\n–û–±—â–∏–π –±–∞–ª–ª: <b>{total_score}</b> –∏–∑ 16.\n–ü–æ–¥–∫–ª—é—á–∞—é –ú–∏—é...")

    user_id = message.from_user.id
    user_name = message.from_user.first_name or "–¥—Ä—É–≥"

    prompt = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à—ë–ª –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç MFI-20 –Ω–∞ –∞—Å—Ç–µ–Ω–∏—é (—É—Å—Ç–∞–ª–æ—Å—Ç—å). "
        f"–û–±—â–∏–π –±–∞–ª–ª: {total_score} –∏–∑ 16.\n"
        f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å–¥–µ–ª–∞–π –≤—ã–≤–æ–¥, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞—Å—Ç–µ–Ω–∏–∏. "
        f"–û–±—ä—è—Å–Ω–∏ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–º —è–∑—ã–∫–µ, –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç —Å–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞, "
        f"–∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –∏ —Å–Ω–∏–∂–µ–Ω–∏—é —É—Ç–æ–º–ª—è–µ–º–æ—Å—Ç–∏."
    )

    response = await ask_mia(user_id, user_name, prompt)
    await message.answer(response, reply_markup=main_menu())
