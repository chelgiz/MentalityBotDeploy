# bot/handlers/beck.py

from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from bot.services.openai_assistant import ask_mia
from bot.keyboards.main_keyboard import main_menu

router = Router()


class BeckTest(StatesGroup):
    q1 = State()
    q2 = State()
    q3 = State()
    q4 = State()


questions = [
    "1Ô∏è‚É£ –ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —É—Å—Ç–∞–ª–æ—Å—Ç—å –∏–ª–∏ –∞–ø–∞—Ç–∏—é?",
    "2Ô∏è‚É£ –¢–µ–±–µ —á–∞—Å—Ç–æ —Ç—Ä—É–¥–Ω–æ –Ω–∞–π—Ç–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é —á—Ç–æ-—Ç–æ –¥–µ–ª–∞—Ç—å?",
    "3Ô∏è‚É£ –ë—ã–≤–∞—é—Ç –ª–∏ —É —Ç–µ–±—è –ø–µ—Ä–∏–æ–¥—ã, –∫–æ–≥–¥–∞ —Ç—ã —Ç–µ—Ä—è–µ—à—å –∏–Ω—Ç–µ—Ä–µ—Å –∫ –≤–µ—â–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–Ω—å—à–µ —Ä–∞–¥–æ–≤–∞–ª–∏?",
    "4Ô∏è‚É£ –ö–∞–∫ —á–∞—Å—Ç–æ —É —Ç–µ–±—è –±—ã–≤–∞—é—Ç –≥—Ä—É—Å—Ç–Ω—ã–µ –∏–ª–∏ —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –º—ã—Å–ª–∏?"
]


@router.message(F.text == "üìò –ë–µ–∫")
async def beck_start(message: types.Message, state: FSMContext):
    await state.set_state(BeckTest.q1)
    await message.answer("üìò –¢–µ—Å—Ç –ë–µ–∫–∞ ‚Äî –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –¥–µ–ø—Ä–µ—Å—Å–∏—é.\n\n–û—Ü–µ–Ω–∏ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 3:\n0 ‚Äî –Ω–∏–∫–æ–≥–¥–∞\n1 ‚Äî –∏–Ω–æ–≥–¥–∞\n2 ‚Äî —á–∞—Å—Ç–æ\n3 ‚Äî –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞\n\n" + questions[0])


@router.message(BeckTest.q1)
async def beck_q1(message: types.Message, state: FSMContext):
    await state.update_data(q1=message.text)
    await state.set_state(BeckTest.q2)
    await message.answer(questions[1])


@router.message(BeckTest.q2)
async def beck_q2(message: types.Message, state: FSMContext):
    await state.update_data(q2=message.text)
    await state.set_state(BeckTest.q3)
    await message.answer(questions[2])


@router.message(BeckTest.q3)
async def beck_q3(message: types.Message, state: FSMContext):
    await state.update_data(q3=message.text)
    await state.set_state(BeckTest.q4)
    await message.answer(questions[3])


@router.message(BeckTest.q4)
async def beck_q4(message: types.Message, state: FSMContext):
    await state.update_data(q4=message.text)
    data = await state.get_data()
    await state.clear()

    try:
        scores = [int(data[f'q{i}']) for i in range(1, 5)]
        total = sum(scores)
    except ValueError:
        await message.answer("–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤—ë–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Ö–æ–¥–∏ —Ç–µ—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏—Ñ—Ä—ã –æ—Ç 0 –¥–æ 3.")
        return

    summary = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –ë–µ–∫–∞: {total} –±–∞–ª–ª–æ–≤.\n\n"
    if total <= 4:
        summary += "üü¢ –í–µ—Ä–æ—è—Ç–Ω–æ, –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–µ–ø—Ä–µ—Å—Å–∏–∏ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã."
    elif 5 <= total <= 9:
        summary += "üü° –õ—ë–≥–∫–∞—è —Å—Ç–µ–ø–µ–Ω—å –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."
    elif 10 <= total <= 14:
        summary += "üü† –°—Ä–µ–¥–Ω—è—è —Å—Ç–µ–ø–µ–Ω—å –¥–µ–ø—Ä–µ—Å—Å–∏–∏."
    else:
        summary += "üî¥ –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–µ–ø—Ä–µ—Å—Å–∏–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É."

    user_name = message.from_user.first_name or "–¥—Ä—É–≥"
    user_id = message.from_user.id
    response = await ask_mia(user_id, user_name, f"{summary}\n\n–î–∞–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")

    await message.answer(f"<b>{summary}</b>\n\n{response}", reply_markup=main_menu())
