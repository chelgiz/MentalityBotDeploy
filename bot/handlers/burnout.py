from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from bot.services.openai_assistant import ask_mia
from aiogram.filters import Command

router = Router()

class BurnoutTest(StatesGroup):
    Q1 = State()
    Q2 = State()
    Q3 = State()
    Q4 = State()
    Q5 = State()

# –°—Ç–∞—Ä—Ç –∫–æ–º–∞–Ω–¥—ã
@router.message(F.text == "üî• –í—ã–≥–æ—Ä–∞–Ω–∏–µ")
async def start_burnout(message: types.Message, state: FSMContext):
    await message.answer("üß™ –¢–µ—Å—Ç –Ω–∞ –≤—ã–≥–æ—Ä–∞–Ω–∏–µ. –û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ.\n\n1Ô∏è‚É£ –ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –∏—Å—Ç–æ—â—ë–Ω–Ω—ã–º –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã?")
    await state.set_state(BurnoutTest.Q1)

@router.message(BurnoutTest.Q1)
async def burnout_q1(message: types.Message, state: FSMContext):
    await state.update_data(q1=message.text)
    await message.answer("2Ô∏è‚É£ –°–Ω–∏–∂–∞–µ—Ç—Å—è –ª–∏ —É —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å –∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è –∫ —Ç–æ–º—É, —á—Ç–æ —Ä–∞–Ω—å—à–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–ª–æ?")
    await state.set_state(BurnoutTest.Q2)

@router.message(BurnoutTest.Q2)
async def burnout_q2(message: types.Message, state: FSMContext):
    await state.update_data(q2=message.text)
    await message.answer("3Ô∏è‚É£ –ß—É–≤—Å—Ç–≤—É–µ—à—å –ª–∏ —Ç—ã –±–µ–∑—Ä–∞–∑–ª–∏—á–∏–µ –∏–ª–∏ —Ü–∏–Ω–∏–∑–º –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ —Ä–∞–±–æ—Ç–µ?")
    await state.set_state(BurnoutTest.Q3)

@router.message(BurnoutTest.Q3)
async def burnout_q3(message: types.Message, state: FSMContext):
    await state.update_data(q3=message.text)
    await message.answer("4Ô∏è‚É£ –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã (–±–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞, –≥–æ–ª–æ–≤–Ω—ã–µ –±–æ–ª–∏, —É—Å—Ç–∞–ª–æ—Å—Ç—å)?")
    await state.set_state(BurnoutTest.Q4)

@router.message(BurnoutTest.Q4)
async def burnout_q4(message: types.Message, state: FSMContext):
    await state.update_data(q4=message.text)
    await message.answer("5Ô∏è‚É£ –ò—Å–ø—ã—Ç—ã–≤–∞–µ—à—å –ª–∏ —Ç—ã —á—É–≤—Å—Ç–≤–æ –±–µ—Å–ø–æ–º–æ—â–Ω–æ—Å—Ç–∏ –∏–ª–∏ –æ—Ç—á–∞—è–Ω–∏—è?")
    await state.set_state(BurnoutTest.Q5)

@router.message(BurnoutTest.Q5)
async def burnout_q5(message: types.Message, state: FSMContext):
    await state.update_data(q5=message.text)
    data = await state.get_data()
    await state.clear()

    user_id = message.from_user.id
    user_name = message.from_user.first_name or "–¥—Ä—É–≥"

    prompt = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç –Ω–∞ –≤—ã–≥–æ—Ä–∞–Ω–∏–µ.\n"
        f"–í–æ—Ç –µ–≥–æ –æ—Ç–≤–µ—Ç—ã:\n"
        f"1. {data['q1']}\n"
        f"2. {data['q2']}\n"
        f"3. {data['q3']}\n"
        f"4. {data['q4']}\n"
        f"5. {message.text}\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –¥–∞–π —á–µ–ª–æ–≤–µ—á–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
        f"–∏ –º—è–≥–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é. –û–±—Ä–∞—â–∞–π—Å—è –ø–æ –∏–º–µ–Ω–∏: {user_name}."
    )

    try:
        response = await ask_mia(user_id, user_name, prompt)
    except Exception as e:
        response = f"–ú–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û—à–∏–±–∫–∞: {e}"

    await message.answer(response)
